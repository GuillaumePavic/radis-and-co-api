BEGIN;

CREATE TABLE "type" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "label" TEXT NOT NULL
);

CREATE TABLE "plant" ( 
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL, 
    "scientific_name" TEXT NOT NULL,
    "sun" INTEGER NOT NULL,
    "difficulty" INTEGER NOT NULL,
    "water" INTEGER NOT NULL,
    "icon" TEXT NOT NULL,
    "image" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "size" NUMERIC(9, 2) NOT NULL,
    "companion_pos" INTEGER[],
    "companion_neg" INTEGER[],
    "type_id" INTEGER NOT NULL REFERENCES "type"("id")
);

CREATE TABLE "user" (
    "id" INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "email" TEXT NOT NULL UNIQUE, 
    "password" TEXT NOT NULL, 
    "pseudo" TEXT NOT NULL, 
    "is_admin" BOOLEAN NOT NULL DEFAULT FALSE, 
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE "schema" (
    "id" INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL,
    "length" INTEGER NOT NULL,
    "width" INTEGER NOT NULL,
    "user_id" INTEGER NOT NULL REFERENCES "user"("id") ON DELETE CASCADE,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "deleted_at" TIMESTAMPTZ
);

CREATE TABLE "schema_has_plant" (
    "id" INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "schema_id" INTEGER NOT NULL REFERENCES "schema"("id") ON DELETE CASCADE,
    "plant_id" INTEGER NOT NULL REFERENCES "plant"("id") ON DELETE CASCADE,
    "coord_x" INTEGER NOT NULL,
    "coord_y" INTEGER NOT NULL
);

CREATE OR REPLACE FUNCTION add_plant(plant json) RETURNS void AS $$
    INSERT INTO plant
    (id, name, scientific_name, sun, difficulty, water, icon, image, description, size, companion_pos, companion_neg, type_id) 
    VALUES(
        (plant->>'id')::integer,
        (plant->>'name'),
        (plant->>'scientific_name'),
        (plant->>'sun')::integer,
        (plant->>'difficulty')::integer,
        (plant->>'water')::integer,
        (plant->>'icon'),
        (plant->>'image'),
        (plant->>'description'),
        (plant->>'size')::numeric,
        (plant->>'companion_pos')::integer[],
        (plant->>'companion_neg')::integer[],
        (plant->>'type_id')::integer
    );
$$ LANGUAGE sql;


CREATE OR REPLACE FUNCTION add_type(type json) RETURNS void AS $$
    INSERT INTO "type"
    (id, label) 
    VALUES(
        (type->>'id')::integer, 
        (type->>'label')
    );
$$ LANGUAGE sql;


CREATE OR REPLACE FUNCTION add_user("user" json) RETURNS "user" AS $$
    INSERT INTO "user"
    ("email", "password", "pseudo") 
    VALUES(
        ("user"->>'email'), 
        ("user"->>'password'),
        ("user"->>'pseudo')
    ) RETURNING *;
$$ LANGUAGE sql;

COMMIT;